@using Blazorise.Localization

@implements IDisposable

@inject NavigationManager navManager
@inject NavBreadcrumbService navBreadcrumb

@rendermode InteractiveAuto

<Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Background="Background.Primary" ThemeContrast="ThemeContrast.Light" Shadow="Shadow.Default" Padding="Padding.Is3.OnX" >
    <BarBrand Margin="Margin.Is1">
        <BarItem>
            <NavBreadcrumb />
        </BarItem>
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            @*
            <BarItem>
                <BarLink To="/">Home</BarLink>
            </BarItem>
            <BarItem>
                <BarLink To="https://blazorise.com/docs/">Documentation</BarLink>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>More</BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="https://blazorise.com/docs/start/">
                            Quick-Start Guide
                        </BarDropdownItem>
                        <BarDropdownDivider />
                        <BarDropdownItem To="https://blazorise.com/docs/usage/">
                            Usage
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>Layout</BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem Clicked="@(()=>OnLayoutTypeChecked("fixed-header"))">
                            @if ( LayoutType == "fixed-header" )
                            {
                                <Icon Name="IconName.CheckCircle" TextColor="TextColor.Success" />
                            }
                            Fixed Header
                        </BarDropdownItem>
                        <BarDropdownItem Clicked="@(()=>OnLayoutTypeChecked("fixed-header-footer-only"))">
                            @if ( LayoutType == "fixed-header-footer-only" )
                            {
                                <Icon Name="IconName.CheckCircle" TextColor="TextColor.Success" />
                            }
                            Fixed Header and Footer only
                        </BarDropdownItem>
                        <BarDropdownItem Clicked="@(()=>OnLayoutTypeChecked("sider-with-header-on-top"))">
                            @if ( LayoutType == "sider-with-header-on-top" )
                            {
                                <Icon Name="IconName.CheckCircle" TextColor="TextColor.Success" />
                            }
                            Sider with Header on top
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            *@

        </BarStart>
        <BarEnd>
            @*
            <BarItem>
                <BarDropdown RightAligned>
                    <BarDropdownToggle><Icon Name="IconName.Language" /></BarDropdownToggle>
                    <BarDropdownMenu>
                        @foreach ( var cultureInfo in LocalizationService!.AvailableCultures )
                        {
                            <BarDropdownItem @key="@cultureInfo.Name" Clicked="@(()=>SelectCulture(cultureInfo.Name))">
                                @if ( cultureInfo.IsNeutralCulture )
                                {
                                    @cultureInfo.EnglishName
                                }
                                else
                                {
                                    @cultureInfo.Parent.EnglishName
                                }
                            </BarDropdownItem>
                        }
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <BarDropdown RightAligned>
                    <BarDropdownToggle><Icon Name="IconName.Tint" /> Theme</BarDropdownToggle>
                    <BarDropdownMenu Style="padding: 15px; min-width:550px;">
                        <Row>
                            <Column Margin="Margin.Is2.FromBottom">
                                <Field>
                                    <Switch TValue="bool" Checked="@(Theme?.Enabled == true)" CheckedChanged="@ThemeEnabledChanged">Theme enabled</Switch>
                                </Field>
                            </Column>
                        </Row>
                        <Row>
                            <Column Margin="Margin.Is2.FromBottom">
                                <Field>
                                    <Check TValue="bool" Checked="@(Theme?.IsGradient == true)" CheckedChanged="@ThemeGradientChanged">Gradient colors</Check>
                                </Field>
                                <Field>
                                    <Check TValue="bool" Checked="@(Theme?.IsRounded == true)" CheckedChanged="@ThemeRoundedChanged">Rounded elements</Check>
                                </Field>
                            </Column>
                        </Row>
                        <Row>
                            <Column>
                                <Container Fluid>
                                    <ThemeColorSelector Value="@(Theme?.ColorOptions?.Primary)" ValueChanged="@ThemeColorChanged"></ThemeColorSelector>
                                </Container>
                            </Column>
                        </Row>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            *@
            <BarItem>
                <BarLink To="https://github.com/c3p1-dev/C3P1" Target="Target.Blank">GitHub</BarLink>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>
@code {
    void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // check if we're going to Identity section
        string target = e.Location.Substring(navManager.BaseUri.Length);

        if (target.StartsWith("Account/") || target.StartsWith("account/"))
        {
            // Show a static breadcrumb for all Account section
            //navBreadcrumb.Reset();
            navBreadcrumb.SetBreadcrumbs(new List<Node>()
            {
                new Node() {Text = "Home", Link = ""},
                new Node() {Text = "Identity", Link = "", Active = true}
            });
        }
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        navManager.LocationChanged -= LocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the event
        navManager.LocationChanged += LocationChanged;

        await SelectCulture( "en-US" );

        await base.OnInitializedAsync();
    }

    Task SelectCulture( string name )
    {
        LocalizationService!.ChangeLanguage( name );

        return Task.CompletedTask;
    }

    private bool topbarVisible = false;

    Task OnLayoutTypeChecked( string layoutType )
    {
        LayoutType = layoutType;

        return LayoutTypeChanged.InvokeAsync( layoutType );
    }

    [Parameter] public EventCallback<bool> ThemeEnabledChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeGradientChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeRoundedChanged { get; set; }

    [Parameter] public EventCallback<string> ThemeColorChanged { get; set; }

    [Parameter] public string? LayoutType { get; set; }

    [Parameter] public EventCallback<string> LayoutTypeChanged { get; set; }

    [Inject] protected ITextLocalizerService? LocalizationService { get; set; }

    [CascadingParameter] protected Theme? Theme { get; set; }
}